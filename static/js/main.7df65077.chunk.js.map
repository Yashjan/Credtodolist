{"version":3,"sources":["logo.svg","todoProject/testtodo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Testtodo","useState","inputData","setInputData","list","localStorage","getItem","console","log","JSON","parse","getLocalItems","items","setItems","toogleSubmit","setToggleSubmit","isEditItem","setIsEditItem","addItem","map","elem","id","name","allInputData","Date","getTime","toString","alert","useEffect","setItem","stringify","className","src","todo","alt","type","placeholder","value","onChange","e","target","title","onClick","newEditItem","find","editItem","updatedItems","filter","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7df65077.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect} from 'react'\r\nimport \"../App.css\";\r\nimport todo from \"../logo.svg\";\r\n\r\n\r\nconst getLocalItems = () => {\r\n    let list = localStorage.getItem('lists');\r\n    console.log(list);\r\n    if (list) {\r\n        console.log(JSON.parse(localStorage.getItem('lists')));\r\n        return JSON.parse(localStorage.getItem('lists'));\r\n    } else {\r\n        return []\r\n    }\r\n};\r\n\r\nconst Testtodo = () => {\r\n\r\n    const [inputData, setInputData] = useState('');\r\n\r\n    const [items, setItems] = useState(getLocalItems());\r\n\r\n    const [toogleSubmit, setToggleSubmit] = useState(true);\r\n\r\n    const [isEditItem, setIsEditItem] = useState(null);\r\n\r\n    const addItem = () => {\r\n        if (!inputData) {\r\n            alert('plz fill the data');\r\n        }\r\n        else if (inputData && !toogleSubmit) {\r\n            // alert('I am clicked ');\r\n            \r\n            setItems(\r\n                items.map((elem) => {\r\n                    if (elem.id === isEditItem) {\r\n                        console.log('I am matched ');\r\n                        return { ...elem, name:inputData };\r\n                    }\r\n                    return elem;\r\n                })\r\n            );\r\n\r\n            setToggleSubmit(true);\r\n\r\n            setInputData('');\r\n\r\n            setIsEditItem(null);\r\n        }\r\n        else {\r\n            const allInputData = { id: new Date().getTime().toString() , name:inputData}\r\n            setItems([...items, allInputData]);\r\n            setInputData('');\r\n        }\r\n        \r\n    }\r\n\r\n    const deleteItem = (id) => {\r\n        // console.log('deleted');\r\n        const updatedItems = items.filter((elem) => {\r\n            return elem.id !== id;\r\n        })\r\n        setItems(updatedItems);\r\n    }\r\n\r\n\r\n // edit the item\r\n//     When user clikc on edit button \r\n\r\n// 1: get the id and name of the data which user clicked to edit\r\n// 2: set the toggle mode to change the submit button into edit button\r\n// 3: Now update the value of the setInput with the new updated value to edit. \r\n// 4: To pass the current element Id to new state variable for reference \r\n    \r\n    const editItem = (id) => {\r\n\r\n        let newEditItem = items.find((elem) => {\r\n            return elem.id === id;\r\n        })\r\n        console.log(newEditItem.name);\r\n\r\n        setToggleSubmit(false);\r\n\r\n        setInputData(newEditItem.name);\r\n        console.log(\"my new input name is\" + inputData);\r\n        setIsEditItem(id);\r\n\r\n    }\r\n\r\n\r\n    // remove all the data \r\n    const remvoveAll = () => {\r\n        setItems([]);\r\n    }\r\n\r\n    // add data to localStorage\r\n    useEffect(() => {\r\n        // localStorage.setItem('thapaName', 'vinod');\r\n        localStorage.setItem('lists', JSON.stringify(items));\r\n    }, [items]);\r\n\r\n    return (\r\n       <>\r\n            <div className=\"main-div\">\r\n                <div className=\"child-div\">\r\n                    <figure>\r\n                        <img src={todo} alt=\"todoLogo\" />\r\n                        <figcaption>Add your list here ✌ </figcaption>\r\n                        {/* <div>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div> */}\r\n                    </figure>\r\n                    <div className=\"addItems\">\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"✍️ Add item...\"\r\n                            value={inputData }\r\n                            onChange={(e) => setInputData(e.target.value)}\r\n                        />\r\n\r\n                        {/* toggle the submit btn with the edit btn  */}\r\n                        { toogleSubmit ? <i className=\"fa fa-plus add-btn\" title=\"Add item\" onClick={() => addItem()}></i> :  <i className=\"far fa-edit add-btn\" title=\"Edit item\" onClick={addItem}></i> }\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"showItems\">\r\n                        {\r\n                            items.map((elem) => {\r\n                                return (\r\n                                    <div className=\"eachItem\" key={elem.id}>\r\n                                        <h3> {elem.name} </h3>\r\n                                        <div className='todo-btn'>\r\n                                            <i className=\"far fa-edit add-btn\" title=\"Edit item\" onClick={() => editItem(elem.id)}></i>\r\n                                            <i className=\"far fa-trash-alt add-btn\" title=\"Delete item\" onClick={() => deleteItem(elem.id)}></i>\r\n                                        </div>\r\n                                       \r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"showItems\">\r\n                        <button className=\"btn effect04\" data-sm-link-text=\"Remove All\" target=\"_blank\" onClick={remvoveAll}><span>CHECK LIST </span></button>\r\n                    </div>\r\n\r\n                </div>\r\n         </div>   \r\n      </>\r\n    )\r\n}\r\n\r\nexport default Testtodo\r\n","import React from 'react'\nimport Todo from './todoProject/testtodo'\nconst App = () => {\n  return (\n    <>\n     {/* <GalleryReact /> */}\n     <Todo />\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}